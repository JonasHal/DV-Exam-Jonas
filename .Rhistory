library(here)
library(tidyverse)
library(roll)
library(magrittr)
library(shiny)
library(leafletDK)
library(mapview)
start <- as.Date("2020-09-25")
end   <- as.Date("2020-10-01")
bins <- c(1, 2, 4, 8, 16, 32, 64, 128, 256)
pal <- colorBin("YlOrRd", domain = dc$casesDiagnosed, bins = bins)
library(here)
library(tidyverse)
library(roll)
library(magrittr)
library(shiny)
library(leafletDK)
library(mapview)
# import data frames COVID: cases, tests and population size of municipalities
dc <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_cases_time_series.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dt <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_tested_persons_time_series.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dsize <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_test_pos.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
# make data tidy
dc %<>%
# use pivot_longer to transpose all columns (apart from date_sample) to two columns ('kommune',
#  'testsConducted'
#'casesDiagnosed')
#that hold the name of the kommune and the values of the number of diagnosed cases
pivot_longer(cols = !date_sample, names_to = "kommune", values_to = "casesDiagnosed") %>%
arrange(kommune, date_sample)
dc$kommune <- str_replace(dc$kommune, "Copenhagen", "København")
dc
dt %<>%
# use pivot_longer to transpose all columns (apart from PrDate_adjusted) to two columns ('kommune','testsConducted') that hold the name of the kommune and the values of the number of conducted tests
pivot_longer(cols = !PrDate_adjusted, names_to = "kommune", values_to = "testsConducted") %>%
arrange(kommune, PrDate_adjusted) %>%
rename(date_sample = PrDate_adjusted) %>%
filter(!(kommune == "X101"))
dt$kommune <- str_replace(dt$kommune, "Copenhagen", "København")
# make data compatible rename columns for merging
dsize <- dsize %>%
select(contains("Kom"), Befolkningstal) %>%
rename("kID" = `Kommune_(id)`, "kommune" = `Kommune_(navn)`, population = Befolkningstal) %>%
mutate(population = population * 1000) %>%
select(-kID)
# change the name to fit the same municipalitynames from leafletDK
dsize$kommune <- str_replace(dsize$kommune, "Copenhagen", "København")
df <- merge(dc, dt)
start <- as.Date("2020-09-25")
end   <- as.Date("2020-10-01")
bins <- c(1, 2, 4, 8, 16, 32, 64, 128, 256)
pal <- colorBin("YlOrRd", domain = dc$casesDiagnosed, bins = bins)
seperated <- split(df, df$date_sample)
while (start < end)
{
map <- seperated[[format(start)]]
pal <- colorBin("YlOrRd", domain = map$casesDiagnosed, bins = bins)
frame <- municipalityDK("casesDiagnosed", "kommune", data = map, legend=T) %>%
addPolygons(fillColor = pal(map$casesDiagnosed))
mapshot(frame, file = paste0(getwd(), "/animation/", format(start), ".png"))
start <- start + 1
}
start <- as.Date("2020-09-25")
end   <- as.Date("2020-10-01")
bins <- c(1, 2, 4, 8, 16, 32, 64, 128, 256)
pal <- colorBin("YlOrRd", domain = dc$casesDiagnosed, bins = bins)
seperated <- split(df, df$date_sample)
while (start < end)
{
map <- seperated[[format(start)]]
pal <- colorBin("YlOrRd", domain = map$casesDiagnosed, bins = bins)
frame <- municipalityDK("casesDiagnosed", "kommune", data = map, legend=T)
mapshot(frame, file = paste0(getwd(), "/animation/", format(start), ".png"))
start <- start + 1
}
shiny::runApp('server')
runApp('leaflet')
runApp('leaflet')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dk$NAME_2 <- str_replace(dk$NAME_2, "Høje Taastrup", "Høje-Taastrup")
library(here)
library(tidyverse)
library(roll)
library(magrittr)
library(shiny)
library(leafletDK)
library(mapview)
dc <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_cases_time_series.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dt <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_tested_persons_time_series.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dsize <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_test_pos.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dk <- st_read("shapefiles/gadm36_DNK_2.shp")
dk$NAME_2 <- str_replace(dk$NAME_2, "Århus", "Aarhus")
dk$NAME_2 <- str_replace(dk$NAME_2, "Høje Taastrup", "Høje-Taastrup")
dk$NAME_2 <- str_replace(dk$NAME_2, "Vesthimmerland", "Vesthimmerlands")
# dc<-read_delim("Municipality_cases_time_series.csv", ";", escape_double = FALSE, trim_ws = TRUE)
dsize <- dsize %>%
select(contains("Kom"), Befolkningstal) %>%
rename("kID" = `Kommune_(id)`, "kommune" = `Kommune_(navn)`, population = Befolkningstal) %>%
mutate(population = population * 1000) %>%
select(-kID)
ProcessData <- function(dc) {
# re-formatting the dc dataframe
dc %<>%
pivot_longer(cols = !date_sample, names_to = "kommune", values_to = "casesDiagnosed") %>% arrange(kommune, date_sample)
# replacing dots with hyphen
dc$kommune <- gsub("\\.", "-", dc$kommune)
# re-formatting the dt dataframe
dt %<>%
pivot_longer(cols = !PrDate_adjusted, names_to = "kommune", values_to = "testsConducted") %>%
arrange(kommune, PrDate_adjusted) %>%
rename(date_sample = PrDate_adjusted)
# check Kommune name can be used as key
unique(dc[!(dc$kommune %in% dsize$kommune), ]$kommune)
unique(dsize[!(dsize$kommune %in% dc$kommune), ]$kommune)
unique(dt[!(dt$kommune %in% dsize$kommune), ]$kommune)
# ooops!
# for some reason one data frame uses København the other Copenhagen),
dc$kommune <- str_replace(dc$kommune, "Copenhagen", "København")
# merge data together
dc <- merge(dc, dsize)
# create new variables (e.g. rolling aggregates)
dc %<>%
group_by(kommune) %>%
mutate(
casesDPer100k = casesDiagnosed / (population / 100000),
dcr7d = roll_sum(casesDiagnosed, width = 7, min_obs = 1),
dcr7dPer100k = dcr7d / (population / 100000),
dcr7dPer100kCh1 = dcr7dPer100k - lag(dcr7dPer100k, 1),
dcr7dPer100kCh3 = dcr7dPer100k - lag(dcr7dPer100k, 3),
dcr7dPer100kCh7 = dcr7dPer100k - lag(dcr7dPer100k, 7)
)
return(dc)
}
Process_sf <- function(dk) {
# including population to the shapefile
dk_pop <-
dsize %>%
left_join(dk, by = c("kommune" = "NAME_2"))
# transforming dk_pop to a shapefile
sf_dk <- st_as_sf(dk_pop, sf_column_name = "geometry")
# getting the centroids to grab the coordinates from the shapefile - results
# in a matrix
dk_cent <- st_centroid(sf_dk)
dk_coords <- st_coordinates(dk_cent)
# converting the matrix into a df again
dk_coords_next <- as.data.frame(dk_coords)
# adding the coordinates to the kommunes and their population
dk_merge_coords <-
dsize %>%
cbind(dk_coords_next)
# merging the coordinates into the shapefile
dk_merge_coords <-
dk_merge_coords %>%
merge(sf_dk)
return(dk_merge_coords)
}
runApp()
runApp()
View(dc)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("C:/Users/Jonas/Documents/GitHub/dataVisSSI/dataread.RData")
# adding the coordinates to the kommunes and their population
dk_merge_coords <-
dsize %>%
cbind(dk_coords_next)
library(here)
library(tidyverse)
library(roll)
library(magrittr)
library(shiny)
library(leafletDK)
library(mapview)
dc <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_cases_time_series.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dt <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_tested_persons_time_series.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dsize <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_test_pos.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dk <- st_read("shapefiles/gadm36_DNK_2.shp")
dk$NAME_2 <- str_replace(dk$NAME_2, "Århus", "Aarhus")
dk$NAME_2 <- str_replace(dk$NAME_2, "Høje Taastrup", "Høje-Taastrup")
dk$NAME_2 <- str_replace(dk$NAME_2, "Vesthimmerland", "Vesthimmerlands")
# dc<-read_delim("Municipality_cases_time_series.csv", ";", escape_double = FALSE, trim_ws = TRUE)
dsize <- dsize %>%
select(contains("Kom"), Befolkningstal) %>%
rename("kID" = `Kommune_(id)`, "kommune" = `Kommune_(navn)`, population = Befolkningstal) %>%
mutate(population = population * 1000) %>%
select(-kID)
ProcessData <- function(dc) {
# re-formatting the dc dataframe
dc %<>%
pivot_longer(cols = !date_sample, names_to = "kommune", values_to = "casesDiagnosed") %>% arrange(kommune, date_sample)
# replacing dots with hyphen
dc$kommune <- gsub("\\.", "-", dc$kommune)
# re-formatting the dt dataframe
dt %<>%
pivot_longer(cols = !PrDate_adjusted, names_to = "kommune", values_to = "testsConducted") %>%
arrange(kommune, PrDate_adjusted) %>%
rename(date_sample = PrDate_adjusted)
# check Kommune name can be used as key
unique(dc[!(dc$kommune %in% dsize$kommune), ]$kommune)
unique(dsize[!(dsize$kommune %in% dc$kommune), ]$kommune)
unique(dt[!(dt$kommune %in% dsize$kommune), ]$kommune)
# ooops!
# for some reason one data frame uses København the other Copenhagen),
dc$kommune <- str_replace(dc$kommune, "Copenhagen", "København")
# merge data together
dc <- merge(dc, dsize)
# create new variables (e.g. rolling aggregates)
dc %<>%
group_by(kommune) %>%
mutate(
casesDPer100k = casesDiagnosed / (population / 100000),
dcr7d = roll_sum(casesDiagnosed, width = 7, min_obs = 1),
dcr7dPer100k = dcr7d / (population / 100000),
dcr7dPer100kCh1 = dcr7dPer100k - lag(dcr7dPer100k, 1),
dcr7dPer100kCh3 = dcr7dPer100k - lag(dcr7dPer100k, 3),
dcr7dPer100kCh7 = dcr7dPer100k - lag(dcr7dPer100k, 7)
)
return(dc)
}
Process_sf <- function(dk) {
# including population to the shapefile
dk_pop <-
dsize %>%
left_join(dk, by = c("kommune" = "NAME_2"))
# transforming dk_pop to a shapefile
sf_dk <- st_as_sf(dk_pop, sf_column_name = "geometry")
# getting the centroids to grab the coordinates from the shapefile - results
# in a matrix
dk_cent <- st_centroid(sf_dk)
dk_coords <- st_coordinates(dk_cent)
# converting the matrix into a df again
dk_coords_next <- as.data.frame(dk_coords)
# adding the coordinates to the kommunes and their population
dk_merge_coords <-
dsize %>%
cbind(dk_coords_next)
# merging the coordinates into the shapefile
dk_merge_coords <-
dk_merge_coords %>%
merge(sf_dk)
return(dk_merge_coords)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(here)
library(tidyverse)
library(roll)
library(magrittr)
library(leaflet)
library(shiny)
library(sf)
dc <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_cases_time_series.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dt <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_tested_persons_time_series.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dsize <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_test_pos.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dk <- st_read("shapefiles/gadm36_DNK_2.shp")
dk$NAME_2 <- str_replace(dk$NAME_2, "Århus", "Aarhus")
dk$NAME_2 <- str_replace(dk$NAME_2, "Høje Taastrup", "Høje-Taastrup")
dk$NAME_2 <- str_replace(dk$NAME_2, "Vesthimmerland", "Vesthimmerlands")
# dc<-read_delim("Municipality_cases_time_series.csv", ";", escape_double = FALSE, trim_ws = TRUE)
dsize <- dsize %>%
select(contains("Kom"), Befolkningstal) %>%
rename("kID" = `Kommune_(id)`, "kommune" = `Kommune_(navn)`, population = Befolkningstal) %>%
mutate(population = population * 1000) %>%
select(-kID)
ProcessData <- function(dc) {
# re-formatting the dc dataframe
dc %<>%
pivot_longer(cols = !date_sample, names_to = "kommune", values_to = "casesDiagnosed") %>% arrange(kommune, date_sample)
# replacing dots with hyphen
dc$kommune <- gsub("\\.", "-", dc$kommune)
# re-formatting the dt dataframe
dt %<>%
pivot_longer(cols = !PrDate_adjusted, names_to = "kommune", values_to = "testsConducted") %>%
arrange(kommune, PrDate_adjusted) %>%
rename(date_sample = PrDate_adjusted)
# check Kommune name can be used as key
unique(dc[!(dc$kommune %in% dsize$kommune), ]$kommune)
unique(dsize[!(dsize$kommune %in% dc$kommune), ]$kommune)
unique(dt[!(dt$kommune %in% dsize$kommune), ]$kommune)
# ooops!
# for some reason one data frame uses København the other Copenhagen),
dc$kommune <- str_replace(dc$kommune, "Copenhagen", "København")
# merge data together
dc <- merge(dc, dsize)
# create new variables (e.g. rolling aggregates)
dc %<>%
group_by(kommune) %>%
mutate(
casesDPer100k = casesDiagnosed / (population / 100000),
dcr7d = roll_sum(casesDiagnosed, width = 7, min_obs = 1),
dcr7dPer100k = dcr7d / (population / 100000),
dcr7dPer100kCh1 = dcr7dPer100k - lag(dcr7dPer100k, 1),
dcr7dPer100kCh3 = dcr7dPer100k - lag(dcr7dPer100k, 3),
dcr7dPer100kCh7 = dcr7dPer100k - lag(dcr7dPer100k, 7)
)
return(dc)
}
Process_sf <- function(dk) {
# including population to the shapefile
dk_pop <-
dsize %>%
left_join(dk, by = c("kommune" = "NAME_2"))
# transforming dk_pop to a shapefile
sf_dk <- st_as_sf(dk_pop, sf_column_name = "geometry")
# getting the centroids to grab the coordinates from the shapefile - results
# in a matrix
dk_cent <- st_centroid(sf_dk)
dk_coords <- st_coordinates(dk_cent)
# converting the matrix into a df again
dk_coords_next <- as.data.frame(dk_coords)
# adding the coordinates to the kommunes and their population
dk_merge_coords <-
dsize %>%
cbind(dk_coords_next)
# merging the coordinates into the shapefile
dk_merge_coords <-
dk_merge_coords %>%
merge(sf_dk)
return(dk_merge_coords)
}
runApp()
runApp()
View(dk)
View(dc)
View(dc)
runApp()
dc <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_cases_time_series.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dt <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_tested_persons_time_series.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dsize <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_test_pos.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
dk <- st_read("shapefiles/gadm36_DNK_2.shp")
dk$NAME_2 <- str_replace(dk$NAME_2, "Århus", "Aarhus")
dk$NAME_2 <- str_replace(dk$NAME_2, "Høje Taastrup", "Høje-Taastrup")
dk$NAME_2 <- str_replace(dk$NAME_2, "Vesthimmerland", "Vesthimmerlands")
# dc<-read_delim("Municipality_cases_time_series.csv", ";", escape_double = FALSE, trim_ws = TRUE)
dsize <- dsize %>%
select(contains("Kom"), Befolkningstal) %>%
rename("kID" = `Kommune_(id)`, "kommune" = `Kommune_(navn)`, population = Befolkningstal) %>%
mutate(population = population * 1000) %>%
select(-kID)
ProcessData <- function(dc) {
# re-formatting the dc dataframe
dc %<>%
pivot_longer(cols = !date_sample, names_to = "kommune", values_to = "casesDiagnosed") %>% arrange(kommune, date_sample)
# replacing dots with hyphen
dc$kommune <- gsub("\\.", "-", dc$kommune)
# re-formatting the dt dataframe
dt %<>%
pivot_longer(cols = !PrDate_adjusted, names_to = "kommune", values_to = "testsConducted") %>%
arrange(kommune, PrDate_adjusted) %>%
rename(date_sample = PrDate_adjusted)
# check Kommune name can be used as key
unique(dc[!(dc$kommune %in% dsize$kommune), ]$kommune)
unique(dsize[!(dsize$kommune %in% dc$kommune), ]$kommune)
unique(dt[!(dt$kommune %in% dsize$kommune), ]$kommune)
# ooops!
# for some reason one data frame uses København the other Copenhagen),
dc$kommune <- str_replace(dc$kommune, "Copenhagen", "København")
return(dc)
}
Process_sf <- function(dk) {
# including population to the shapefile
dk_pop <-
dsize %>%
left_join(dk, by = c("kommune" = "NAME_2"))
# transforming dk_pop to a shapefile
sf_dk <- st_as_sf(dk_pop, sf_column_name = "geometry")
# getting the centroids to grab the coordinates from the shapefile - results
# in a matrix
dk_cent <- st_centroid(sf_dk)
dk_coords <- st_coordinates(dk_cent)
# converting the matrix into a df again
dk_coords_next <- as.data.frame(dk_coords)
# adding the coordinates to the kommunes and their population
dk_merge_coords <-
dsize %>%
cbind(dk_coords_next)
# merging the coordinates into the shapefile
dk_merge_coords <-
dk_merge_coords %>%
merge(sf_dk)
return(dk_merge_coords)
}
ProcessData <- function(dc) {
# re-formatting the dc dataframe
dc %<>%
pivot_longer(cols = !date_sample, names_to = "kommune", values_to = "casesDiagnosed") %>% arrange(kommune, date_sample)
# replacing dots with hyphen
dc$kommune <- gsub("\\.", "-", dc$kommune)
# re-formatting the dt dataframe
dt %<>%
pivot_longer(cols = !PrDate_adjusted, names_to = "kommune", values_to = "testsConducted") %>%
arrange(kommune, PrDate_adjusted) %>%
rename(date_sample = PrDate_adjusted)
# check Kommune name can be used as key
unique(dc[!(dc$kommune %in% dsize$kommune), ]$kommune)
unique(dsize[!(dsize$kommune %in% dc$kommune), ]$kommune)
unique(dt[!(dt$kommune %in% dsize$kommune), ]$kommune)
# ooops!
# for some reason one data frame uses København the other Copenhagen),
dc$kommune <- str_replace(dc$kommune, "Copenhagen", "København")
return(dc)
}
Process_sf <- function(dk) {
# including population to the shapefile
dk_pop <-
dsize %>%
left_join(dk, by = c("kommune" = "NAME_2"))
# transforming dk_pop to a shapefile
sf_dk <- st_as_sf(dk_pop, sf_column_name = "geometry")
# getting the centroids to grab the coordinates from the shapefile - results
# in a matrix
dk_cent <- st_centroid(sf_dk)
dk_coords <- st_coordinates(dk_cent)
# converting the matrix into a df again
dk_coords_next <- as.data.frame(dk_coords)
# adding the coordinates to the kommunes and their population
dk_merge_coords <-
dsize %>%
cbind(dk_coords_next)
# merging the coordinates into the shapefile
dk_merge_coords <-
dk_merge_coords %>%
merge(sf_dk)
return(dk_merge_coords)
}
dc <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_cases_time_series.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
View(dc)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test <- ProcessData(dc)
View(test)
runApp()
