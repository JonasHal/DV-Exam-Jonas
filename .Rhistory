pivot_longer(cols = !PrDate_adjusted, names_to = "kommune", values_to = "testsConducted") %>%
arrange(kommune, PrDate_adjusted) %>%
rename(date_sample = PrDate_adjusted)
# check Kommune name can be used as key
unique(dc[!(dc$kommune %in% dsize$kommune), ]$kommune)
unique(dsize[!(dsize$kommune %in% dc$kommune), ]$kommune)
unique(dt[!(dt$kommune %in% dsize$kommune), ]$kommune)
# ooops!
# for some reason one data frame uses København the other Copenhagen),
dc$kommune <- str_replace(dc$kommune, "Copenhagen", "København")
return(dc)
}
Process_sf <- function(dk) {
# including population to the shapefile
dk_pop <-
dsize %>%
left_join(dk, by = c("kommune" = "NAME_2"))
# transforming dk_pop to a shapefile
sf_dk <- st_as_sf(dk_pop, sf_column_name = "geometry")
# getting the centroids to grab the coordinates from the shapefile - results
# in a matrix
dk_cent <- st_centroid(sf_dk)
dk_coords <- st_coordinates(dk_cent)
# converting the matrix into a df again
dk_coords_next <- as.data.frame(dk_coords)
# adding the coordinates to the kommunes and their population
dk_merge_coords <-
dsize %>%
cbind(dk_coords_next)
# merging the coordinates into the shapefile
dk_merge_coords <-
dk_merge_coords %>%
merge(sf_dk)
return(dk_merge_coords)
}
dc <- read_delim(here("Data-Epidemiologiske-Rapport-05102020-kl14", "Municipality_cases_time_series.csv"), ";", escape_double = FALSE, trim_ws = TRUE)
View(dc)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test <- ProcessData(dc)
View(test)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dc)
View(dc)
View(dc)
runApp()
runApp()
View(dc)
runApp()
runApp()
runApp()
View(dt)
View(dsize)
View(dc)
View(dsize)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
install.packages("rsconnect")
runApp()
rsconnect::setAccountInfo(name='jonashal', token='994D003C27E1A279CD609CCFEB829F77', secret='QksEO+1pxbU2ED0WmOiNL47+YxVwqqBjY/c/PlNb')
rsconnect::setAccountInfo(name='jonashal', token='994D003C27E1A279CD609CCFEB829F77', secret='QksEO+1pxbU2ED0WmOiNL47+YxVwqqBjY/c/PlNb')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/GitHub/DV-Exam-Jonas')
shiny::runApp()
deployApp()
rsconnect::deployApp(server = "server.R")
jonashal
rsconnect::deployApp()
rsconnect::setAccountInfo(name='jonashal', token='994D003C27E1A279CD609CCFEB829F77', secret='QksEO+1pxbU2ED0WmOiNL47+YxVwqqBjY/c/PlNb')
rsconnect::deployApp(server = "server.R")
rsconnect::setAccountInfo(name="jonashal", token="994D003C27E1A279CD609CCFEB829F77", secret="QksEO+1pxbU2ED0WmOiNL47+YxVwqqBjY/c/PlNb")
rsconnect::deployApp(server = "server.R")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
$?
runApp()
runApp()
runApp()
runApp()
View(dc)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
?head()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinycssloaders")
install.packages("shinycssloaders")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(rt)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dc)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dc)
runApp()
View(coronasource)
runApp()
runApp()
runApp()
runApp()
runApp()
View(coronasource)
View(coronasource)
runApp()
View(dk)
View(dt)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
View(dk)
View(dc)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dm)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("data.table")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("plotly")
install.packages("plotly")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dc)
View(dm)
View(dsize)
View(rt)
runApp()
runApp()
runApp()
runApp()
View(cs)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(cs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("scales")
install.packages("lubridate")
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
